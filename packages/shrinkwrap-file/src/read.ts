
import {
  CURRENT_SHRINKWRAP_FILENAME,
  SHRINKWRAP_VERSION,
  WANTED_SHRINKWRAP_FILENAME,
} from '@pnpm/constants'
import { Shrinkwrap } from '@pnpm/shrinkwrap-types'
import { DEPENDENCIES_FIELDS } from '@pnpm/types'
import path = require('path')
import readYamlFile from 'read-yaml-file'
import { ShrinkwrapBreakingChangeError } from './errors'
import logger from './logger'

export const readPrivate = readCurrent

export async function readCurrent (
  pkgPath: string,
  opts: {
    wantedVersion?: number,
    ignoreIncompatible: boolean,
  },
): Promise<Shrinkwrap | null> {
  const shrinkwrapPath = path.join(pkgPath, CURRENT_SHRINKWRAP_FILENAME)
  return _read(shrinkwrapPath, pkgPath, opts)
}

export const read = readWanted

export async function readWanted (
  pkgPath: string,
  opts: {
    wantedVersion?: number,
    ignoreIncompatible: boolean,
  },
): Promise<Shrinkwrap | null> {
  const shrinkwrapPath = path.join(pkgPath, WANTED_SHRINKWRAP_FILENAME)
  return _read(shrinkwrapPath, pkgPath, opts)
}

async function _read (
  shrinkwrapPath: string,
  prefix: string,
  opts: {
    wantedVersion?: number,
    ignoreIncompatible: boolean,
  },
): Promise<Shrinkwrap | null> {
  let shrinkwrap
  try {
    shrinkwrap = await readYamlFile<Shrinkwrap>(shrinkwrapPath)
  } catch (err) {
    if ((err as NodeJS.ErrnoException).code !== 'ENOENT') {
      throw err
    }
    return null
  }
  // tslint:disable:no-string-literal
  if (shrinkwrap && typeof shrinkwrap['specifiers'] !== 'undefined') {
    shrinkwrap.importers = {
      '.': {
        specifiers: shrinkwrap['specifiers'],
      },
    }
    delete shrinkwrap['specifiers']
    for (const depType of DEPENDENCIES_FIELDS) {
      if (shrinkwrap[depType]) {
        shrinkwrap.importers['.'][depType] = shrinkwrap[depType]
        delete shrinkwrap[depType]
      }
    }
  }
  if (shrinkwrap) {
    // tslint:enable:no-string-literal
    if (typeof opts.wantedVersion !== 'number' || Math.floor(shrinkwrap.lockfileVersion) === Math.floor(opts.wantedVersion)) {
      if (typeof opts.wantedVersion === 'number' && shrinkwrap.lockfileVersion > opts.wantedVersion) {
        logger.warn({
          message: `Your ${WANTED_SHRINKWRAP_FILENAME} was generated by a newer version of pnpm. ` +
            `It is a compatible version but it might get downgraded to version ${opts.wantedVersion}`,
          prefix,
        })
      }
      return shrinkwrap
    }
  }
  if (opts.ignoreIncompatible) {
    logger.warn({
      message: `Ignoring not compatible shrinkwrap file at ${shrinkwrapPath}`,
      prefix,
    })
    return null
  }
  throw new ShrinkwrapBreakingChangeError(shrinkwrapPath)
}

export function create (
  importerIds: string[],
  opts: {
    lockfileVersion: number,
  },
) {
  const importers = importerIds.reduce((acc, importerId) => {
    acc[importerId] = {
      dependencies: {},
      specifiers: {},
    }
    return acc
  }, {})
  return {
    importers,
    lockfileVersion: opts.lockfileVersion || SHRINKWRAP_VERSION,
  }
}
